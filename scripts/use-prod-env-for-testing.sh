#!/bin/bash

# Script to configure test environment to use production environment variables
# This allows testing with production-like configuration while maintaining test-specific overrides

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
log() {
    local level=$1
    local message=$2
    case $level in
        "INFO") echo -e "${BLUE}[INFO]${NC} $message" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $message" ;;
        "WARN") echo -e "${YELLOW}[WARN]${NC} $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $message" ;;
    esac
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --enable    Enable using production environment variables for testing"
    echo "  --disable   Disable using production environment variables for testing"
    echo "  --status    Show current configuration status"
    echo "  --help      Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 --enable   # Configure test environment to use production variables"
    echo "  $0 --disable  # Use test-specific environment variables only"
    echo "  $0 --status   # Check current configuration"
}

# Function to check if production environment file exists
check_prod_env() {
    if [[ ! -f ".env.production" ]]; then
        log "ERROR" "Production environment file (.env.production) not found!"
        log "INFO" "Please create .env.production with your production configuration first."
        return 1
    fi
    return 0
}

# Function to enable production variables for testing
enable_prod_env() {
    log "INFO" "Enabling production environment variables for testing..."
    
    if ! check_prod_env; then
        return 1
    fi
    
    # Create a backup of current .env.test if it exists
    if [[ -f ".env.test" ]]; then
        cp .env.test .env.test.backup
        log "INFO" "Backed up current .env.test to .env.test.backup"
    fi
    
    # Create new .env.test with production variables
    cat > .env.test << 'EOF'
# Test Environment Configuration
# Uses production environment variables as defaults with test-specific overrides
# Generated by use-prod-env-for-testing.sh

# Database Configuration (test-specific)
POSTGRES_DB=${POSTGRES_DB:-l2p_test}
POSTGRES_USER=${POSTGRES_USER:-l2p_test_user}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-l2p_test_password}
POSTGRES_HOST=${POSTGRES_HOST:-localhost}
POSTGRES_PORT=${POSTGRES_PORT:-5433}
DATABASE_URL=postgresql://${POSTGRES_USER:-l2p_test_user}:${POSTGRES_PASSWORD:-l2p_test_password}@${POSTGRES_HOST:-localhost}:${POSTGRES_PORT:-5433}/${POSTGRES_DB:-l2p_test}

# Application Configuration (test-specific overrides)
NODE_ENV=test
DOMAIN=${DOMAIN:-l2p.test}
BACKEND_PORT=${BACKEND_PORT:-3001}
FRONTEND_URL=http://localhost:3000

# JWT Configuration (test-specific secrets)
JWT_SECRET=${JWT_SECRET:-test-jwt-secret-for-testing-only-do-not-use-in-production}
JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-test-jwt-refresh-secret-for-testing-only-do-not-use-in-production}

# Frontend Configuration (test-specific)
VITE_API_URL=http://localhost:3001/api
VITE_SOCKET_URL=http://localhost:3001
VITE_TEST_MODE=true

# Database SSL (disabled for local testing)
DB_SSL=false

# Logging (test-specific)
LOG_LEVEL=warn

# Email Configuration (test-specific)
SMTP_HOST=${SMTP_HOST:-localhost}
SMTP_PORT=${SMTP_PORT:-1025}
SMTP_SECURE=false
SMTP_USER=${SMTP_USER:-test}
SMTP_PASS=${SMTP_PASS:-test}
EMAIL_SENDER_ADDRESS=${EMAIL_SENDER_ADDRESS:-test@learn2play.test}
EMAIL_SENDER_NAME=${EMAIL_SENDER_NAME:-Learn2Play Test}

# API Keys (use production keys if available, otherwise test keys)
GEMINI_API_KEY=${GEMINI_API_KEY:-test-api-key}
GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID:-}
GOOGLE_SERVICE_ACCOUNT_EMAIL=${GOOGLE_SERVICE_ACCOUNT_EMAIL:-}

# Inherit other production variables
# Add any additional production variables you want to inherit here
EOF

    # Create a flag file to indicate this configuration is active
    echo "$(date): Production environment variables enabled for testing" > .env.test.prod-enabled
    
    log "SUCCESS" "Production environment variables enabled for testing!"
    log "INFO" "The test environment will now use production variables as defaults."
    log "INFO" "Test-specific overrides are still applied where needed."
    log "INFO" "Run '$0 --status' to see the current configuration."
}

# Function to disable production variables for testing
disable_prod_env() {
    log "INFO" "Disabling production environment variables for testing..."
    
    # Restore backup if it exists
    if [[ -f ".env.test.backup" ]]; then
        mv .env.test.backup .env.test
        log "SUCCESS" "Restored original .env.test from backup"
    else
        # Create a basic test environment file
        cat > .env.test << 'EOF'
# Test Environment Configuration
# Test-specific variables only (no production inheritance)

# Database Configuration
POSTGRES_DB=l2p_test
POSTGRES_USER=l2p_test_user
POSTGRES_PASSWORD=l2p_test_password
POSTGRES_HOST=localhost
POSTGRES_PORT=5433
DATABASE_URL=postgresql://l2p_test_user:l2p_test_password@localhost:5433/l2p_test

# Application Configuration
NODE_ENV=test
DOMAIN=l2p.test
BACKEND_PORT=3001
FRONTEND_URL=http://localhost:3000

# JWT Configuration
JWT_SECRET=test-jwt-secret-for-testing-only-do-not-use-in-production
JWT_REFRESH_SECRET=test-jwt-refresh-secret-for-testing-only-do-not-use-in-production

# Frontend Configuration
VITE_API_URL=http://localhost:3001/api
VITE_SOCKET_URL=http://localhost:3001
VITE_TEST_MODE=true

# Database SSL
DB_SSL=false

# Logging
LOG_LEVEL=warn

# Email Configuration
SMTP_HOST=localhost
SMTP_PORT=1025
SMTP_SECURE=false
SMTP_USER=test
SMTP_PASS=test
EMAIL_SENDER_ADDRESS=test@learn2play.test
EMAIL_SENDER_NAME=Learn2Play Test

# API Keys
GEMINI_API_KEY=test-api-key
GOOGLE_CLOUD_PROJECT_ID=
GOOGLE_SERVICE_ACCOUNT_EMAIL=
EOF
        log "SUCCESS" "Created new test-specific .env.test"
    fi
    
    # Remove the flag file
    rm -f .env.test.prod-enabled
    
    log "SUCCESS" "Production environment variables disabled for testing!"
    log "INFO" "The test environment now uses test-specific variables only."
}

# Function to show current status
show_status() {
    echo "=== Test Environment Configuration Status ==="
    echo ""
    
    if [[ -f ".env.test.prod-enabled" ]]; then
        log "SUCCESS" "Production environment variables are ENABLED for testing"
        echo "Configuration: Uses production variables as defaults with test-specific overrides"
        echo "Flag file: .env.test.prod-enabled exists"
    else
        log "INFO" "Production environment variables are DISABLED for testing"
        echo "Configuration: Uses test-specific variables only"
        echo "Flag file: .env.test.prod-enabled not found"
    fi
    
    echo ""
    echo "Environment files:"
    if [[ -f ".env.production" ]]; then
        echo "  ✓ .env.production exists"
    else
        echo "  ✗ .env.production missing"
    fi
    
    if [[ -f ".env.test" ]]; then
        echo "  ✓ .env.test exists"
        echo "  Size: $(wc -l < .env.test) lines"
    else
        echo "  ✗ .env.test missing"
    fi
    
    if [[ -f ".env.test.backup" ]]; then
        echo "  ✓ .env.test.backup exists (backup available)"
    fi
    
    echo ""
    echo "To change configuration:"
    echo "  $0 --enable   # Enable production variables"
    echo "  $0 --disable  # Disable production variables"
}

# Main script logic
case "${1:-}" in
    --enable)
        enable_prod_env
        ;;
    --disable)
        disable_prod_env
        ;;
    --status)
        show_status
        ;;
    --help|-h|"")
        show_usage
        ;;
    *)
        log "ERROR" "Unknown option: $1"
        show_usage
        exit 1
        ;;
esac 