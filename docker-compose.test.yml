version: '3.8'

services:
  # PostgreSQL Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: l2p-postgres-test
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-learn2play_test}
      POSTGRES_USER: ${POSTGRES_USER:-test_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test_password}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - ./database/init-test.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - test_postgres_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-test_user} -d ${POSTGRES_DB:-learn2play_test}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # ChromaDB Test Service removed - no longer needed

  # Backend Test Service
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
      cache_from:
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: l2p-backend-test
    environment:
      NODE_ENV: test
      PORT: ${BACKEND_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-test_user}:${POSTGRES_PASSWORD:-test_password}@postgres-test:5432/${POSTGRES_DB:-learn2play_test}
      JWT_SECRET: ${JWT_SECRET:-test-jwt-secret-for-testing-only-do-not-use-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-test-jwt-refresh-secret-for-testing-only-do-not-use-in-production}
      FRONTEND_URL: http://frontend-test:3000
      DB_SSL: ${DB_SSL:-false}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      # CHROMA_URL removed - no longer needed
      GEMINI_API_KEY: ${GEMINI_API_KEY:-test-api-key}
      SMTP_HOST: ${SMTP_HOST:-mailhog-test}
      SMTP_PORT: ${SMTP_PORT:-1025}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER:-test}
      SMTP_PASS: ${SMTP_PASS:-test}
      EMAIL_SENDER_ADDRESS: ${EMAIL_SENDER_ADDRESS:-test@learn2play.test}
      EMAIL_SENDER_NAME: ${EMAIL_SENDER_NAME:-Learn2Play Test}
      GOOGLE_CLOUD_PROJECT_ID: ${GOOGLE_CLOUD_PROJECT_ID:-}
      GOOGLE_SERVICE_ACCOUNT_EMAIL: ${GOOGLE_SERVICE_ACCOUNT_EMAIL:-}
    depends_on:
      postgres-test:
        condition: service_healthy
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/package.json:/app/package.json:ro
      - ./backend/package-lock.json:/app/package-lock.json:ro
      - test_backend_node_modules:/app/node_modules
      - test_backend_logs:/app/logs
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 15s
    restart: unless-stopped
    tmpfs:
      - /tmp

  # Frontend Test Service
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
      cache_from:
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: l2p-frontend-test
    environment:
      NODE_ENV: test
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001/api}
      VITE_SOCKET_URL: ${VITE_SOCKET_URL:-http://localhost:3001}
      VITE_TEST_MODE: ${VITE_TEST_MODE:-true}
      VITE_CHROMA_URL: ${VITE_CHROMA_URL:-http://localhost:8001}
    depends_on:
      backend-test:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/package-lock.json:/app/package-lock.json:ro
      - test_frontend_node_modules:/app/node_modules
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    tmpfs:
      - /tmp

  # MailHog for Email Testing
  mailhog-test:
    image: mailhog/mailhog:latest
    container_name: l2p-mailhog-test
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # Redis for Session/Cache Testing (if needed)
  redis-test:
    image: redis:7-alpine
    container_name: l2p-redis-test
    ports:
      - "6380:6379"
    volumes:
      - test_redis_data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru

volumes:
  test_postgres_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=512m,uid=999,gid=999
  # test_chroma_data removed - no longer needed
  test_redis_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=128m,uid=999,gid=999
  test_backend_node_modules:
    driver: local
  test_frontend_node_modules:
    driver: local
  test_backend_logs:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16