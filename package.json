{
  "name": "learn2play",
  "version": "1.0.0",
  "description": "Learn2Play multiplayer quiz platform",
  "type": "module",
  "scripts": {
    "install:all": "npm install && cd frontend && npm install && cd ../backend && npm install && cd ../testing && npm install",
    "build:all": "cd frontend && npm run build && cd ../backend && npm run build",
    "test-cli": "node test-cli.js",
    "test:unit": "cd testing && npm run test:unit:all",
    "test:e2e": "cd testing && npm run test:e2e:all",
    "test:e2e:headed": "cd testing && npm run test:ui",
    "test:integration": "cd testing && npm run test:integration:all",
    "test:all": "cd testing && npm run test:all",
    "test:coverage": "cd testing && npm run test:coverage",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && npm run dev",
    "dev:testing": "cd testing && npm run test:ui",
    "start:test-env": "cd testing && npm run start:test-env",
    "stop:test-env": "cd testing && npm run stop:test-env",
    "reset:test-env": "cd testing && npm run reset:test-env",
    "deploy": "bash rebuild.sh",
    "stop": "docker-compose --profile production down",
    "logs": "docker-compose --profile production logs -f",
    "backup": "docker-compose --profile production exec postgres pg_dump -U l2p_user learn2play > backup_$(date +%Y%m%d_%H%M%S).sql",
    "test:quick": "cd testing && npm run test:unit:frontend:quick",
    "test:debug": "cd testing && npm run test:unit:frontend:debug",
    "test:validate": "cd testing && node validate-test-env.js",
    "test:fix": "cd testing && node fix-test-environment-comprehensive.js",
    "test:config:validate": "node scripts/test-config.js validate",
    "test:config:health": "node scripts/test-config.js health-check",
    "test:config:show": "node scripts/test-config.js show-config",
    "test:config:init": "node scripts/test-config.js init-env",
    "test:config:help": "node scripts/test-config.js help",
    "test:env:validate": "./scripts/validate-test-environment.sh",
    "test:env:start": "./scripts/test-environment.sh start",
    "test:env:stop": "./scripts/test-environment.sh stop",
    "test:env:restart": "./scripts/test-environment.sh restart",
    "test:env:reset": "./scripts/test-environment.sh reset",
    "test:env:cleanup": "./scripts/test-environment.sh cleanup",
    "test:env:status": "./scripts/test-environment.sh status",
    "test:env:health": "./scripts/test-environment.sh health",
    "test:env:logs": "./scripts/test-environment.sh logs",
    "test:env:urls": "./scripts/test-environment.sh urls",
    "coverage:collect": "node scripts/aggregate-coverage.js",
    "coverage:report": "node shared/test-config/CoverageConfigCLI.js report",
    "coverage:badge": "node shared/test-config/CoverageConfigCLI.js badge",
    "coverage:config": "node shared/test-config/CoverageConfigCLI.js show",
    "coverage:validate": "node shared/test-config/CoverageConfigCLI.js validate",
    "coverage:threshold": "node shared/test-config/CoverageConfigCLI.js set-threshold",
    "coverage:exclude": "node shared/test-config/CoverageConfigCLI.js add-exclusion"
  },
  "devDependencies": {
    "@playwright/test": "^1.40.1",
    "@types/js-yaml": "^4.0.9",
    "@types/node-fetch": "^2.6.13",
    "concurrently": "^8.2.2",
    "js-yaml": "^4.1.0",
    "node-fetch": "^3.3.2"
  },
  "workspaces": [
    "frontend",
    "backend",
    "testing"
  ]
}
