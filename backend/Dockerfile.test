# Test-optimized Dockerfile for backend with faster builds and better caching

# Base stage with common dependencies
FROM node:18-alpine@sha256:2e4e09791f38c5fd3d1af57b5f5eaf8d4d6d0c9e1c4a0f3a5c8d5f5b4a3b2c1 AS base
WORKDIR /app

# Install system dependencies for testing
RUN --mount=type=cache,target=/var/cache/apk \
    apk add --no-cache \
    curl \
    wget \
    bash \
    git \
    python3 \
    make \
    g++

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    mkdir -p /app/logs /app/coverage /app/test-results /app/dist && \
    chown -R nodejs:nodejs /app

# Dependencies stage - cached separately for better build performance
FROM base AS dependencies
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install all dependencies (including dev dependencies for testing)
RUN --mount=type=cache,target=/root/.npm \
    npm install --include=dev --legacy-peer-deps --prefer-offline --no-audit --progress=false && \
    npm cache clean --force

# Development/Test stage
FROM base AS test
WORKDIR /app

# Set environment variables for build
ENV NODE_ENV=test
ENV CI=true

# Copy package files first to leverage Docker cache
COPY --chown=nodejs:nodejs package*.json ./

# Install only production dependencies first
RUN --mount=type=cache,target=/root/.npm \
    npm install --only=production --legacy-peer-deps --prefer-offline --no-audit --progress=false && \
    npm cache clean --force

# Copy node_modules from dependencies stage
COPY --from=dependencies --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy source code
COPY --chown=nodejs:nodejs . .

# Set proper permissions
RUN chown -R nodejs:nodejs /app && \
    chmod -R 755 /app/logs /app/coverage /app/test-results /app/dist

# Install global test utilities
RUN npm install -g nodemon ts-node jest @types/jest

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=10s --timeout=5s --start-period=15s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:3001/api/health || exit 1

# Default command for test environment
CMD ["npm", "run", "dev"]