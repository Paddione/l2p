# Test-optimized Dockerfile for backend with faster builds and better caching

# Base stage with common dependencies
FROM node:18-alpine AS base
WORKDIR /app

# Install system dependencies for testing
RUN apk add --no-cache \
    curl \
    wget \
    bash \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Dependencies stage - cached separately for better build performance
FROM base AS dependencies
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for testing)
RUN npm install --include=dev --legacy-peer-deps && \
    npm cache clean --force

# Development/Test stage
FROM base AS test
WORKDIR /app

# Copy dependencies from previous stage
COPY --from=dependencies --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy package files
COPY --chown=nodejs:nodejs package*.json ./

# Copy source code
COPY --chown=nodejs:nodejs . .

# Create necessary directories with proper permissions
RUN mkdir -p logs coverage test-results dist && \
    chown -R nodejs:nodejs logs coverage test-results dist && \
    chmod -R 755 logs coverage test-results dist

# Install global test utilities
RUN npm install -g nodemon ts-node jest @types/jest

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=10s --timeout=5s --start-period=15s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:3001/api/health || exit 1

# Default command for test environment
CMD ["npm", "run", "dev"]