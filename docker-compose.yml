# Unified Docker Compose configuration with environment separation
# Supports development, testing, and production profiles
# Usage:
#   Development: docker-compose --profile development up
#   Testing: docker-compose --profile test up
#   Production: docker-compose --profile production up

services:
  # =============================================================================
  # PRODUCTION SERVICES
  # =============================================================================

  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-l2p-postgres}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-learn2play}
      POSTGRES_USER: ${POSTGRES_USER:-l2p_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      # Performance tuning
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
      POSTGRES_MAX_CONNECTIONS: "200"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - l2p-network
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-l2p_user} -d ${POSTGRES_DB:-learn2play}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    profiles:
      - production
      - development

  # Backend API - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      cache_from:
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: learn2play/backend:${VERSION:-latest}
    container_name: ${BACKEND_CONTAINER_NAME:-l2p-api}
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${BACKEND_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-l2p_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-learn2play}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      DB_SSL: ${DB_SSL:-true}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_SENDER_ADDRESS: ${EMAIL_SENDER_ADDRESS}
      EMAIL_SENDER_NAME: ${EMAIL_SENDER_NAME}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GOOGLE_CLOUD_PROJECT_ID: ${GOOGLE_CLOUD_PROJECT_ID}
      GOOGLE_SERVICE_ACCOUNT_EMAIL: ${GOOGLE_SERVICE_ACCOUNT_EMAIL}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - l2p-network
    volumes:
      - backend_logs:/app/logs:rw
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-api.entrypoints=websecure"
      - "traefik.http.routers.backend-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend-api.priority=100"
      - "traefik.http.routers.backend-socket.rule=Host(`${DOMAIN}`) && PathPrefix(`/socket.io`)"
      - "traefik.http.routers.backend-socket.entrypoints=websecure"
      - "traefik.http.routers.backend-socket.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend-socket.priority=100"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"
      - "traefik.http.services.backend.loadbalancer.healthcheck.path=/api/health"
      - "traefik.http.services.backend.loadbalancer.healthcheck.interval=30s"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    profiles:
      - production

  # ChromaDB removed - no longer needed

  # Frontend React App - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      cache_from:
        - node:18-alpine
        - nginx:alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: learn2play/frontend:${VERSION:-latest}
    container_name: ${FRONTEND_CONTAINER_NAME:-l2p-app}
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_SOCKET_URL: ${VITE_SOCKET_URL}
    depends_on:
      - backend
    networks:
      - l2p-network
    volumes:
      - frontend_logs:/var/log/nginx:rw
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.services.frontend.loadbalancer.healthcheck.path=/health"
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.bot-block.replacepathregex.regex=^/(.*\\.php|wp-admin|wp-login|xmlrpc\\.php|admin|administrator).*"
      - "traefik.http.middlewares.bot-block.replacepathregex.replacement=/404"
      - "traefik.http.routers.frontend.middlewares=security-headers@docker,bot-block@docker"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    profiles:
      - production

  # Traefik Reverse Proxy - Production
  traefik:
    image: traefik:v3.0
    container_name: ${TRAEFIK_CONTAINER_NAME:-l2p-proxy}
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--global.sendAnonymousUsage=false"
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "${TRAEFIK_HTTPS_PORT:-443}:443"
      - "${TRAEFIK_METRICS_PORT:-8080}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt:rw
      - traefik_logs:/var/log/traefik:rw
    networks:
      - l2p-network
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    profiles:
      - production

  # =============================================================================
  # DEVELOPMENT SERVICES
  # =============================================================================

  # Backend Development Service
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: l2p-backend-dev
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-l2p_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-learn2play}
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-jwt-refresh-secret}
      FRONTEND_URL: http://localhost:3000
      DB_SSL: false
      LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src:rw
      - ./backend/package.json:/app/package.json:ro
      - dev_backend_node_modules:/app/node_modules
      - dev_backend_logs:/app/logs
    networks:
      - l2p-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - development

  # Frontend Development Service
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: l2p-frontend-dev
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001/api
      VITE_SOCKET_URL: http://localhost:3001
      VITE_DEV_MODE: true
    depends_on:
      backend-dev:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src:rw
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
      - dev_frontend_node_modules:/app/node_modules
    networks:
      - l2p-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - development

  # =============================================================================
  # TEST SERVICES
  # =============================================================================

  # PostgreSQL Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: l2p-postgres-test
    environment:
      POSTGRES_DB: learn2play_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5433:5432"
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/test-data.sql:/docker-entrypoint-initdb.d/02-test-data.sql:ro
      - test_postgres_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d learn2play_test"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    tmpfs:
      - /tmp
      - /var/run/postgresql
    profiles:
      - test

  # ChromaDB Test Service removed - no longer needed

  # Backend Test Service
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
      cache_from:
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: l2p-backend-test
    environment:
      NODE_ENV: test
      PORT: 3001
      DATABASE_URL: postgresql://test_user:test_password@postgres-test:5432/learn2play_test
      JWT_SECRET: test-jwt-secret-for-testing-only-do-not-use-in-production
      JWT_REFRESH_SECRET: test-jwt-refresh-secret-for-testing-only-do-not-use-in-production
      FRONTEND_URL: http://frontend-test:3000
      DB_SSL: false
      LOG_LEVEL: warn
      # CHROMA_URL removed - no longer needed
      GEMINI_API_KEY: test-api-key
      SMTP_HOST: mailhog-test
      SMTP_PORT: 1025
      SMTP_SECURE: false
      EMAIL_SENDER_ADDRESS: test@learn2play.test
    depends_on:
      postgres-test:
        condition: service_healthy
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src:ro
      - test_backend_node_modules:/app/node_modules
      - test_backend_logs:/app/logs
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 15s
    restart: unless-stopped
    tmpfs:
      - /tmp
    profiles:
      - test

  # Frontend Test Service
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
      cache_from:
        - node:18-alpine
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: l2p-frontend-test
    environment:
      NODE_ENV: test
      VITE_API_URL: http://localhost:3001/api
      VITE_SOCKET_URL: http://localhost:3001
      VITE_TEST_MODE: true
    depends_on:
      backend-test:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - test_frontend_node_modules:/app/node_modules
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    tmpfs:
      - /tmp
    profiles:
      - test

  # MailHog for Email Testing
  mailhog-test:
    image: mailhog/mailhog:latest
    container_name: l2p-mailhog-test
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    profiles:
      - test

  # Redis for Session/Cache Testing
  redis-test:
    image: redis:7-alpine
    container_name: l2p-redis-test
    ports:
      - "6380:6379"
    volumes:
      - test_redis_data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    profiles:
      - test

volumes:
  # Production volumes
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  letsencrypt_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/letsencrypt
  # chroma_data removed - no longer needed
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/backend
  frontend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/frontend
  traefik_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/traefik

  # Development volumes
  dev_backend_node_modules:
    driver: local
  dev_frontend_node_modules:
    driver: local
  dev_backend_logs:
    driver: local

  # Test volumes (using tmpfs for speed)
  test_postgres_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=512m,uid=999,gid=999
  # test_chroma_data removed - no longer needed
  test_redis_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=128m,uid=999,gid=999
  test_backend_node_modules:
    driver: local
  test_frontend_node_modules:
    driver: local
  test_backend_logs:
    driver: local

networks:
  l2p-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: l2p-bridge
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: l2p-test-bridge